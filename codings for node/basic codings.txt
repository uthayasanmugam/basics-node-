basic server connect to database 
(https://vahan.parivahan.gov.in/nrservices/faces/user/citizen/searchVehicleDetails.xhtml)

index.js
~~~~~

const express = require('express');
const bodyparser = require('body-parser');
const cors = require('cors');
const mongoose =require ('mongoose');

const app = express();
app.use(express.json())

mongoose.connect('mongodb://localhost/calculator')
  .then(() => console.log('Connected to MongoDB...'))
  .catch(err => console.error('Could not connect to MongoDB...'));

  const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));

routes/sign.js
~~~~~~~~~

import express from "express" 
import {register,login,getByid} from "../Controller/sign.js";


const routes=express.Router();


routes.post("/register",register)
routes.post("/login",login)
routes.get("/getByid",getByid)


export default routes;

controller/sign.js
~~~~~~~~~~~

import bcrypt from "bcrypt";
import jwt  from "jsonwebtoken";
import User,{validateUser} from "../model/sign.js";
const saltRount=10;

const register=(async(req,res)=>{
  const { error } = validateUser(req.body); 
  if (error) return res.status(400).send(error.details[0].message);

  const email=req.body.email;
  const exUser= await User.findOne({email:email})
  if(exUser){
    res.send('Email is already taken')
  }
  else{
    bcrypt.hash(req.body.password,saltRount, async function (err,hash){
        let user = new User({ 
          name:req.body.name,
          email:req.body.email,
          password: hash,
          registration:req.body.registration,
          status:req.body.status,
          number:req.body.number,
          type:req.body.type,
          rto:req.body.rto,
      });
        user = await user.save();
        console.log(user);
        res.send(user);
    })

  }
});

const login=(async(req,res)=>{
  
  const email=req.body.email;
  const password=req.body.password
  const exUser= await User.findOne({email:email})
  if(exUser){

      bcrypt.compare(password,exUser.password,async function(err,result){
            if (result) {
              let data=exUser.toObject();
                  const token=jwt.sign({_id:data._id},"mysecretkey")

                  //  res.send(token)
                  console.log("login successfully")
                   res.header("user-reg-token",token).send("login successfully")
                //res.send("login successfully")
            }else{
                res.send("dckghic")
            }
      })

  }
  else{
    
    res.send('Your mail id and password is not matching')
  }


});
export  {register,login};

const getByid=async (req, res) => {
  const user = await User.findById(req.body.id);

  if (!user) return res.status(404).send('The customer with the given ID was not found.');

  res.send(user);
};

export {getByid};


models/sign.js
~~~~~~~~~
import mongoose from "mongoose";
import Joi from "joi";

const User = mongoose.model('User', new mongoose.Schema({    
    name:{
        type:String,
        required:true
    },
    email:{
    type:String,
    required:true
    },
    password:{
        type:String,
        required:true
    },
    registration:{
        type:String,
        required:true
    },
    status:{
        type:String,
        required:true
    },
    number:{
        type:String,
        required:true
    },
    type:{
        type:String,
        required:true
    },
    rto:{
        type:String,
        required:true
    },
    
  }));
  
  function validateUser(user) {
    const schema = Joi.object({
       name:Joi.string().required(), 
       email:Joi.string().required(),
       password:Joi.string().required(),
       registration:Joi.string().required(),
       status:Joi.string().required(),
       number:Joi.string().required(),
       type:Joi.string().required(),
       rto:Joi.string().required(),      
    });
  
    return schema.validate(user);
}
export default User ;
export {validateUser};



